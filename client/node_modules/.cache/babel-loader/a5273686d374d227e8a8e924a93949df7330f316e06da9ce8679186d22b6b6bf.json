{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Node/BoardGameFurnace/client/src/\\u0441omponents/CardsAuctionRender.js\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst renderProductionRow = side => {\n  if (side.type === \"exchange\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [side.details.from.map((resource, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `resource ${resource}`\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversion\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"usage\",\n          children: [\"x\", side.maxUses]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"arrow\",\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), side.details.to.map((resource, idx) => {\n        if (resource === \"coin\" && typeof side.details.to[idx + 1] === 'number') {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resource coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"usage\",\n              children: [\"x\", side.details.to[idx + 1]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true);\n        } else if (typeof resource === 'number') {\n          // Пропускаем рендер числа, так как оно уже обработано в предыдущем условии\n          return null;\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `resource ${resource}`\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 29\n          }, this);\n        }\n      })]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: side.details.what.map((resource, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `resource ${resource}`\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))\n    }, void 0, false);\n  }\n};\nconst Card = ({\n  card\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"compensation\",\n      children: card.compensation.type === \"production\" ? card.compensation.details.what.map((resource, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `resource ${resource}`\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [card.compensation.details.from.map((resource, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `resource ${resource}`\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"arrow\",\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), card.compensation.details.to.map((resource, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `resource ${resource}`\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0434\\u0435\\u0441\\u044C \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u043A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430 \\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u043E\\u0434\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u043E\\u0433\\u043E \\u0437\\u0434\\u0430\\u043D\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"production\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"production-row\",\n        children: renderProductionRow(card.firstSide)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"production-row transparent\",\n        children: renderProductionRow(card.secondSide)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_c = Card;\nconst CardsGrid = cards => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cards-container\",\n    children: cards.map((card, idx) => /*#__PURE__*/_jsxDEV(Card, {\n      card: card\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n//module.exports = { CardsGrid };\n_c2 = CardsGrid;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardsGrid\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Fragment","_Fragment","renderProductionRow","side","type","children","details","from","map","resource","idx","className","fileName","_jsxFileName","lineNumber","columnNumber","maxUses","to","what","Card","card","compensation","firstSide","secondSide","_c","CardsGrid","cards","_c2","$RefreshReg$"],"sources":["/home/andrei/Node/BoardGameFurnace/client/src/сomponents/CardsAuctionRender.js"],"sourcesContent":["import \"./App.css\"\n\nconst renderProductionRow = (side) => {\n    if (side.type === \"exchange\") {\n        return (\n            <>\n                {side.details.from.map((resource, idx) => (\n                    <div key={idx} className={`resource ${resource}`}></div>\n                ))}\n                <div className=\"conversion\">\n                    <span className=\"usage\">x{side.maxUses}</span>\n                    <span className=\"arrow\">→</span>\n                </div>\n                {side.details.to.map((resource, idx) => {\n                    if (resource === \"coin\" && typeof side.details.to[idx + 1] === 'number') {\n                        return (\n                            <>\n                                <div className=\"resource coin\"></div>\n                                <span className=\"usage\">x{side.details.to[idx + 1]}</span>\n                            </>\n                        );\n                    } else if (typeof resource === 'number') {\n                        // Пропускаем рендер числа, так как оно уже обработано в предыдущем условии\n                        return null;\n                    } else {\n                        return (\n                            <div key={idx} className={`resource ${resource}`}></div>\n                        );\n                    }\n                })}\n            </>\n        );\n    } else {\n        return (\n            <>\n                {side.details.what.map((resource, idx) => (\n                    <div key={idx} className={`resource ${resource}`}></div>\n                ))}\n            </>\n        );\n    }\n}\n\nconst Card = ({card}) => {\n    return (\n        <div className=\"card\">\n            <div className=\"compensation\">\n                {card.compensation.type === \"production\" ? (\n                    card.compensation.details.what.map((resource, idx) => (\n                        <div key={idx} className={`resource ${resource}`}></div>\n                    ))\n                ) : (\n                    <>\n                        {card.compensation.details.from.map((resource, idx) => (\n                            <div key={idx} className={`resource ${resource}`}></div>\n                        ))}\n                        <span className=\"arrow\">→</span>\n                        {card.compensation.details.to.map((resource, idx) => (\n                            <div key={idx} className={`resource ${resource}`}></div>\n                        ))}\n                    </>\n                )}\n            </div>\n            <div className=\"image-placeholder\">\n                <p>Здесь может быть картинка производственного здания</p>\n            </div>\n            <div className=\"production\">\n                <div className={\"production-row\"}>\n                    {renderProductionRow(card.firstSide)}\n                </div>\n                <div className={\"production-row transparent\"}>\n                    {renderProductionRow(card.secondSide)}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst CardsGrid = (cards) => {\n    return (\n        <div className=\"cards-container\">\n            {cards.map((card, idx) => (\n                <Card key={idx} card={card} />\n            ))}\n        </div>\n    );\n};\n\n//module.exports = { CardsGrid };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}