{"ast":null,"code":"/*import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport RoomScreen from '../src/сomponents/RoomScreen';\nimport GameScreen from '../src/сomponents/GameScreen';\n\nconst socket = io('http://localhost:3001');\n\nfunction App() {\n  const [sessionId, setSessionId] = useState('');\n  const [roomId, setRoomId] = useState('');\n  const [inGame, setInGame] = useState(false);\n\n  useEffect(() => {\n    socket.on('session created', (data) => {\n      setSessionId(data.gameId);\n      setInGame(true);\n      alert(`Session created! Share this ID with your friends: ${data.gameId}`);\n    });\n\n    socket.on('session joined', (data) => {\n      setInGame(true);\n      setSessionId(data.gameId);\n      alert(`Joined session: ${data.gameId}`);\n    });\n\n    socket.on('start game', () => {\n      alert('The game is starting!');\n    });\n\n    socket.on('error', (data) => {\n      alert(data.message);\n    });\n\n    return () => {\n      socket.off('session created');\n      socket.off('session joined');\n      socket.off('start game');\n      socket.off('error');\n    };\n  }, []);\n\n  return (\n      <div className=\"App\">\n        <main className=\"App-main\">\n          {!inGame ? (\n              <RoomScreen\n                  socket={socket}\n                  setRoomId={setRoomId}\n                  roomId={roomId}\n                  handleCreateSession={() => socket.emit('create session')}\n                  handleJoinSession={() => socket.emit('join session', roomId)}\n              />\n          ) : (\n              <GameScreen sessionId={sessionId || roomId} />\n          )}\n        </main>\n      </div>\n  );\n}*/\n\n/*\nconst renderProductionRow = (side) => {\n  if (side.type === \"exchange\") {\n    return (\n        <>\n          {side.details.from.map((resource, idx) => (\n              <div key={idx} className={`resource ${resource}`}></div>\n          ))}\n          <div className=\"conversion\">\n            <span className=\"usage\">{side.maxUses}</span>\n            <span className=\"arrow\">→</span>\n          </div>\n          {side.details.to.map((resource, idx) => ( //  ACHTUNG!!!!! тут надо коины обрабатывать\n              <div key={idx} className={`resource ${resource}`}></div>\n          ))}\n        </>\n    );\n  }\n}\n\nconst Card = ({card}) => {\n  return (\n      <div className=\"card\">\n        <div className=\"compensation\">\n          {card.compensation.type === \"production\" ? (\n              card.compensation.details.what.map((resource, idx) => (\n                  <div key={idx} className={`resource ${resource}`}></div>\n              ))\n          ) : (\n              <>\n                  {card.compensation.details.from.map((resource, idx) => (\n                      <div key={idx} className={`resource ${resource}`}></div>\n                  ))}\n                    <span className=\"arrow\"></span>\n                    {card.compensation.details.to.map((resource, idx) => (\n                        <div key={idx} className={`resource ${resource}`}></div>\n                    ))}\n              </>\n          )}\n        </div>\n        <div className=\"image-placeholder\">\n          <p>Здесь может быть картинка производственного здания</p>\n        </div>\n        <div className=\"production\">\n          <div className={\"production-row\"}>\n            {renderProductionRow(card.firstSide)}\n          </div>\n          <div className={\"production-row transparent\"}>\n            {renderProductionRow(card.secondSide)}\n          </div>\n        </div>\n      </div>\n  );\n}\n*/\n\n/*import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\nconst socket = io('http://localhost:3001');\n\nfunction App() {\n  const [sessionId, setSessionId] = useState('');\n  const [roomId, setRoomId] = useState('');\n  const [inGame, setInGame] = useState(false); // новое состояние\n  // const [card, setCard] = useState(null);\n  useEffect(() => {\n    // Подписка на события сокета\n    /!*socket.on(\"card take\", (data) => {\n      setCard(data);\n      console.log(\"card take\");\n    })*!/\n\nsocket.on('session created', (data) => {\n  setSessionId(data.gameId);\n  setInGame(true); // После создания игры убираем кнопки\n  alert(`Session created! Share this ID with your friends: ${data.gameId}`);\n});\n\nsocket.on('session joined', (data) => {\n  setInGame(true); // После присоединения тоже убираем кнопки\n  alert(`Joined session: ${data.gameId}`);\n});\n\nsocket.on('start game', () => {\n  alert('The game is starting!');\n});\n\nsocket.on('error', (data) => {\n  alert(data.message);\n});\n\nreturn () => {\n  socket.off('session created');\n  socket.off('session joined');\n  socket.off('start game');\n  socket.off('error');\n};\n}, []);\n\nconst handleCreateSession = () => {\n  socket.emit('create session');\n};\n\nconst handleJoinSession = () => {\n  if (!roomId) {\n    alert('Please enter a valid Game ID');\n    return;\n  }\n\n  socket.emit('join session', roomId);\n};\n\nreturn (\n    <div className=\"App\">\n      {!inGame && (\n          <header className=\"App-header\">\n            <h1>Furnace</h1>\n          </header>\n      )}\n\n      <main className=\"App-main\">\n        {!inGame && ( // Показываем только если игрок еще не в комнате\n            <>\n              <p>Create new Game</p>\n              <button onClick={handleCreateSession}>New Game</button>\n\n              {sessionId && <p>Session ID: {sessionId}</p>}\n\n              <p>Or Enter Game ID to join:</p>\n              <div className=\"input-container\">\n                <input\n                    id=\"input-game-id\"\n                    type=\"text\"\n                    placeholder=\"Game ID\"\n                    value={roomId}\n                    onChange={(e) => setRoomId(e.target.value)}\n                />\n                <button onClick={handleJoinSession}>Join Game</button>\n              </div>\n            </>\n        )}\n\n        {inGame && <p id=\"game-id-created\">Game ID: {sessionId || roomId} {/!*Card(card.findOne())*!/}</p>}\n      </main>\n    </div>\n);\n}*/\n\nexport default App;","map":{"version":3,"names":["App"],"sources":["/home/andrei/Node/BoardGameFurnace/client/src/App.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport RoomScreen from '../src/сomponents/RoomScreen';\nimport GameScreen from '../src/сomponents/GameScreen';\n\nconst socket = io('http://localhost:3001');\n\nfunction App() {\n  const [sessionId, setSessionId] = useState('');\n  const [roomId, setRoomId] = useState('');\n  const [inGame, setInGame] = useState(false);\n\n  useEffect(() => {\n    socket.on('session created', (data) => {\n      setSessionId(data.gameId);\n      setInGame(true);\n      alert(`Session created! Share this ID with your friends: ${data.gameId}`);\n    });\n\n    socket.on('session joined', (data) => {\n      setInGame(true);\n      setSessionId(data.gameId);\n      alert(`Joined session: ${data.gameId}`);\n    });\n\n    socket.on('start game', () => {\n      alert('The game is starting!');\n    });\n\n    socket.on('error', (data) => {\n      alert(data.message);\n    });\n\n    return () => {\n      socket.off('session created');\n      socket.off('session joined');\n      socket.off('start game');\n      socket.off('error');\n    };\n  }, []);\n\n  return (\n      <div className=\"App\">\n        <main className=\"App-main\">\n          {!inGame ? (\n              <RoomScreen\n                  socket={socket}\n                  setRoomId={setRoomId}\n                  roomId={roomId}\n                  handleCreateSession={() => socket.emit('create session')}\n                  handleJoinSession={() => socket.emit('join session', roomId)}\n              />\n          ) : (\n              <GameScreen sessionId={sessionId || roomId} />\n          )}\n        </main>\n      </div>\n  );\n}*/\n\n/*\nconst renderProductionRow = (side) => {\n  if (side.type === \"exchange\") {\n    return (\n        <>\n          {side.details.from.map((resource, idx) => (\n              <div key={idx} className={`resource ${resource}`}></div>\n          ))}\n          <div className=\"conversion\">\n            <span className=\"usage\">{side.maxUses}</span>\n            <span className=\"arrow\">→</span>\n          </div>\n          {side.details.to.map((resource, idx) => ( //  ACHTUNG!!!!! тут надо коины обрабатывать\n              <div key={idx} className={`resource ${resource}`}></div>\n          ))}\n        </>\n    );\n  }\n}\n\nconst Card = ({card}) => {\n  return (\n      <div className=\"card\">\n        <div className=\"compensation\">\n          {card.compensation.type === \"production\" ? (\n              card.compensation.details.what.map((resource, idx) => (\n                  <div key={idx} className={`resource ${resource}`}></div>\n              ))\n          ) : (\n              <>\n                  {card.compensation.details.from.map((resource, idx) => (\n                      <div key={idx} className={`resource ${resource}`}></div>\n                  ))}\n                    <span className=\"arrow\"></span>\n                    {card.compensation.details.to.map((resource, idx) => (\n                        <div key={idx} className={`resource ${resource}`}></div>\n                    ))}\n              </>\n          )}\n        </div>\n        <div className=\"image-placeholder\">\n          <p>Здесь может быть картинка производственного здания</p>\n        </div>\n        <div className=\"production\">\n          <div className={\"production-row\"}>\n            {renderProductionRow(card.firstSide)}\n          </div>\n          <div className={\"production-row transparent\"}>\n            {renderProductionRow(card.secondSide)}\n          </div>\n        </div>\n      </div>\n  );\n}\n*/\n\n\n\n/*import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\nconst socket = io('http://localhost:3001');\n\nfunction App() {\n  const [sessionId, setSessionId] = useState('');\n  const [roomId, setRoomId] = useState('');\n  const [inGame, setInGame] = useState(false); // новое состояние\n  // const [card, setCard] = useState(null);\n  useEffect(() => {\n    // Подписка на события сокета\n    /!*socket.on(\"card take\", (data) => {\n      setCard(data);\n      console.log(\"card take\");\n    })*!/\n\nsocket.on('session created', (data) => {\n  setSessionId(data.gameId);\n  setInGame(true); // После создания игры убираем кнопки\n  alert(`Session created! Share this ID with your friends: ${data.gameId}`);\n});\n\nsocket.on('session joined', (data) => {\n  setInGame(true); // После присоединения тоже убираем кнопки\n  alert(`Joined session: ${data.gameId}`);\n});\n\nsocket.on('start game', () => {\n  alert('The game is starting!');\n});\n\nsocket.on('error', (data) => {\n  alert(data.message);\n});\n\nreturn () => {\n  socket.off('session created');\n  socket.off('session joined');\n  socket.off('start game');\n  socket.off('error');\n};\n}, []);\n\nconst handleCreateSession = () => {\n  socket.emit('create session');\n};\n\nconst handleJoinSession = () => {\n  if (!roomId) {\n    alert('Please enter a valid Game ID');\n    return;\n  }\n\n  socket.emit('join session', roomId);\n};\n\nreturn (\n    <div className=\"App\">\n      {!inGame && (\n          <header className=\"App-header\">\n            <h1>Furnace</h1>\n          </header>\n      )}\n\n      <main className=\"App-main\">\n        {!inGame && ( // Показываем только если игрок еще не в комнате\n            <>\n              <p>Create new Game</p>\n              <button onClick={handleCreateSession}>New Game</button>\n\n              {sessionId && <p>Session ID: {sessionId}</p>}\n\n              <p>Or Enter Game ID to join:</p>\n              <div className=\"input-container\">\n                <input\n                    id=\"input-game-id\"\n                    type=\"text\"\n                    placeholder=\"Game ID\"\n                    value={roomId}\n                    onChange={(e) => setRoomId(e.target.value)}\n                />\n                <button onClick={handleJoinSession}>Join Game</button>\n              </div>\n            </>\n        )}\n\n        {inGame && <p id=\"game-id-created\">Game ID: {sessionId || roomId} {/!*Card(card.findOne())*!/}</p>}\n      </main>\n    </div>\n);\n}*/\n\n\n\nexport default App;\n"],"mappingseAAeA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}