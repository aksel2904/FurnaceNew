{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Node/BoardGameFurnace/client/src/\\u0441omponents/GameScreen.js\",\n  _s = $RefreshSig$();\n// client/src/components/GameScreen.js\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport '../App.css';\nimport { CardsGrid } from './CardsAuctionRender';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GameScreen({\n  sessionId,\n  socket\n}) {\n  _s();\n  const [playerCards, setPlayerCards] = useState([]);\n  useEffect(() => {\n    // Подписываемся на обновление карт\n    socket.on('update player cards', cards => {\n      setPlayerCards(cards); // Обновляем состояние с картами игрока\n    });\n    return () => {\n      socket.off('update player cards');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"game-id-created\",\n      children: [\"Game ID: \", sessionId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardsGrid, {\n      cards: cards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(GameScreen, \"2SJA0DIW1J4JHnjo9A7xRocw4Ww=\");\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","useState","useEffect","CardsGrid","jsxDEV","_jsxDEV","Fragment","_Fragment","GameScreen","sessionId","socket","_s","playerCards","setPlayerCards","on","cards","off","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/andrei/Node/BoardGameFurnace/client/src/сomponents/GameScreen.js"],"sourcesContent":["// client/src/components/GameScreen.js\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport '../App.css';\nimport {CardsGrid} from './CardsAuctionRender'\n\nfunction GameScreen({ sessionId, socket }) {\n    const [playerCards, setPlayerCards] = useState([]);\n\n    useEffect(() => {\n        // Подписываемся на обновление карт\n        socket.on('update player cards', (cards) => {\n            setPlayerCards(cards);  // Обновляем состояние с картами игрока\n        });\n\n        return () => {\n            socket.off('update player cards');\n        };\n    }, []);\n\n    return (\n        <>\n            <p id=\"game-id-created\">Game ID: {sessionId}</p>\n            {/* Тут можно добавить игровую логику и интерфейс */}\n            <CardsGrid cards={cards}/>\n        </>\n    );\n}\n\nexport default GameScreen;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,YAAY;AACnB,SAAQC,SAAS,QAAO,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,SAASC,UAAUA,CAAC;EAAEC,SAAS;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ;IACAQ,MAAM,CAACI,EAAE,CAAC,qBAAqB,EAAGC,KAAK,IAAK;MACxCF,cAAc,CAACE,KAAK,CAAC,CAAC,CAAE;IAC5B,CAAC,CAAC;IAEF,OAAO,MAAM;MACTL,MAAM,CAACM,GAAG,CAAC,qBAAqB,CAAC;IACrC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIX,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACIZ,OAAA;MAAGa,EAAE,EAAC,iBAAiB;MAAAD,QAAA,GAAC,WAAS,EAACR,SAAS;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEhDjB,OAAA,CAACF,SAAS;MAACY,KAAK,EAAEA;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eAC5B,CAAC;AAEX;AAACX,EAAA,CArBQH,UAAU;AAAAe,EAAA,GAAVf,UAAU;AAuBnB,eAAeA,UAAU;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}